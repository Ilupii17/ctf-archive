from Crypto.Util.number import *
import math
from pwn import *
# NILAI-NILAI INI HARUS DIPERIKSA ULANG DENGAN SANGAT TELITI
n = 105375332609681406515521070043624487782870196469191202161434435531817940797270096886963495613362630149726295573449318680766414229677517682441830990791937099476820215035329281663818952921640911864146786915767893480415096397401467294479247404193884100343032732555022965900945086176438781154250207246166555647819
o1 = 77633598805092640252724107910395222743707418498331661189888724505381859694624522363159360564093918240382178585305319104811978787648604211175237899879841354634012079538469832859655067901694047617975823882351549659190376576638974977699045922795589181771284109834805293637783792031515473496804956462795626934818
o2 = 47429151844475742641042649495407207662566851803789329455756849511508428188444666235575337458509278378043440668303749169805120807459770548206797504115709846618485098694340179746812314900747328860355887054449308844370972363371972119596004863894202184305426870041561045629249134118889938654187837181030481512607
e1 = 186867715974359025539631582285150663971
e2 = 337065940616672019740199340023447546329
ct = 16127635971745761249117457383238357500818225865528781227818178295767094522191015256304698417447261196635354815589533608289075225290218976735930144917429170204631913040282911740200678626608196556229117931217102495952857640280769261620708029036539274328113707476723320511409928978108912915377499577509818504791

# Asumsi e1 dan e2 adalah red herring, dan o1 = p + 5q, o2 = 2p - 3q
val_for_q = (2*o1 - o2) % n
val_for_p = (3*o1 + 5*o2) % n

p = math.gcd(val_for_p, n)
q = math.gcd(val_for_q, n)

# Verifikasi ulang
if p * q != n:
    log.error("Faktorisasi gagal. Periksa kembali semua nilai yang di-copy-paste.")
    log.info("Kemungkinan asumsi awal salah dan tantangan ini memerlukan teknik yang lebih canggih.")
else:
    log.info(f"p ditemukan: {p}")
    log.info(f"q ditemukan: {q}")

    phi = (p-1) * (q-1)
    d = inverse(e, phi)

    blind_factor = (o1 * o2) % n
    m_blinded = pow(ct, d, n)

    m = (m_blinded * inverse(blind_factor, n)) % n
    flag = long_to_bytes(m)
    log.success(f"Flag: {flag.decode()}")